#include <EEPROM.h>
#include <Servo.h>

// Definición de pines para los servomotores
const int boton = 4;
const int codopin = 6;
const int brazopin = 9;
const int munecapin = 10;
const int garrapin = 11;
int buttonstate1 = 0;

// Crear objetos de tipo Servo
Servo codo;
Servo brazo;
Servo muneca;
Servo garra;

//Variables para EEPROM
const int botonGuardar = 2;
const int botonReproducir = 8;
int codoPosicion = 0;
int brazoPosicion = 0;
int munecaPosicion = 0;
int garraPosicion = 0;

void setup() {
  DDRD |= (1 << PD5);
  DDRD &= ~((1 << PD4));
  
   // Configurar el pin digital 2 como entrada
  DDRD &= ~(1 << PD2);  // Establecer el pin D2 como entrada (bit en 0)
  // Activar la resistencia de pull-up interna del botón
  PORTD |= (1 << PD2);  // Establecer el bit correspondiente al pin D2 en 1

  // Configurar el pin del botón como entrada utilizando registros
  DDRB &= ~(1 << PB0);  // Establecer el bit 0 del registro DDRB en 0 (entrada)
  PORTB |= (1 << PB0);  // Habilitar la resistencia de pull-up interna del pin
  
  PCICR |= B00000100; // Activamos las interrupciones del puerto PD
  PCMSK2 |= B00010000;
  sei();
  // Iniciar comunicación serial a 9600 baudios
  Serial.begin(9600);
  
  // Configurar los pines de los servomotores como salidas utilizando registros
  DDRB |= (1 << codopin) | (1 << brazopin) | (1 << munecapin) | (1 << garrapin);
  // Inicializar los objetos de tipo Servo
  codo.attach(codopin);
  brazo.attach(brazopin);
  muneca.attach(munecapin);
  garra.attach(garrapin);
}

void loop() {
    
  if (Serial.available() > 0) {
    // Leer la línea de datos recibida
    String data = Serial.readStringUntil('\n');

    // Separar los ángulos de los servomotores
    int separatorIndex1 = data.indexOf(",");
    int separatorIndex2 = data.indexOf(",", separatorIndex1 + 1);
    int separatorIndex3 = data.indexOf(",", separatorIndex2 + 1);

    if (separatorIndex1 != -1 && separatorIndex2 != -1 && separatorIndex3 != -1) {
      // Extraer los ángulos de los servomotores
      int codoAngle = data.substring(0, separatorIndex1).toInt();
      int brazoAngle = data.substring(separatorIndex1 + 1, separatorIndex2).toInt();
      int munecaAngle = data.substring(separatorIndex2 + 1, separatorIndex3).toInt();
      int garraAngle = data.substring(separatorIndex3 + 1).toInt();

      // Mover los servomotores a los ángulos recibidos
      codo.write(codoAngle);
      brazo.write(brazoAngle);
      muneca.write(munecaAngle);
      garra.write(garraAngle);
    }
  }
  
  if (PIND & (1 << PD2)) {
    // El botón de guardar ha sido presionado
    guardarPosicionesEnEEPROM();
  }

  if (PINB & (1 << PB0)) {
    // El botón de reproducir ha sido presionado
    reproducirMovimientoDesdeEEPROM();
  }
  
}

ISR (PCINT2_vect) {
  // código a ejecutar
  PORTD &= (~(1 << PD5)& ~(1 << PD7));
  if (PIND & B00010000) {
    PORTD |= (1 << PD5);
  }
  if (PIND & B00001000) {
    PORTD |= (1 << PD7);
  }
}

void guardarPosicionesEnEEPROM() {
  // Leer las posiciones actuales de los servos
  codoPosicion = codo.read();
  brazoPosicion = brazo.read();
  munecaPosicion = muneca.read();
  garraPosicion = garra.read();

  // Guardar las posiciones en la EEPROM
  EEPROM.write(0, codoPosicion);
  EEPROM.write(1, brazoPosicion);
  EEPROM.write(2, munecaPosicion);
  EEPROM.write(3, garraPosicion);

  // Esperar un momento para asegurarse de que la escritura se complete
  delay(10);
}

void reproducirMovimientoDesdeEEPROM() {
  // Leer las posiciones almacenadas en la EEPROM
  codoPosicion = EEPROM.read(0);
  brazoPosicion = EEPROM.read(1);
  munecaPosicion = EEPROM.read(2);
  garraPosicion = EEPROM.read(3);

  // Mover los servos a las posiciones almacenadas
  codo.write(codoPosicion);
  brazo.write(brazoPosicion);
  muneca.write(munecaPosicion);
  garra.write(garraPosicion);
}