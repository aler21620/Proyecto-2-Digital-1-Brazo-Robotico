#include <EEPROM.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 16, 2); // Dirección I2C y dimensiones del LCD (16 columnas y 2 filas)

// Definición de pines para los joysticks
const int joyStick1_X = A0;
const int joyStick1_Y = A1;
const int joyStick2_X = A2;
const int joyStick2_Y = A3;

int ledState = 0;
int buttonstate1 = 0;

// Variables para almacenar los ángulos de los servomotores
int codoAngle = 90;
int brazoAngle = 90;
int munecaAngle = 90;
int garraAngle = 90;

int lastServoIndex = -1; // Índice del último servo movido (-1 significa que no se ha movido ningún servo)

int servo1_savedAngle = 90;
int servo2_savedAngle = 90;
int servo3_savedAngle = 90;
int servo4_savedAngle = 90;

bool savePosition = false;
bool play = false; 

// Función para leer un valor analógico utilizando registros ADC
int leerjoystick(int pin) {
  // Mapear los pines analógicos a los pines digitales correspondientes
  if (pin >= 14 && pin <= 19) {
    pin -= 14;
  }

  // Seleccionar el pin ADC
  ADMUX = (ADMUX & 0xF0) | (pin & 0x0F);

  // Configurar la referencia de voltaje y ajuste de izquierda a derecha
  ADMUX |= (1 << REFS0) | (0 << ADLAR);

  // Habilitar el ADC y configurar el prescaler para obtener una frecuencia de muestreo adecuada
  ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);

  // Iniciar la conversión
  ADCSRA |= (1 << ADSC);

  // Esperar a que la conversión se complete
  while (ADCSRA & (1 << ADSC));

  // Leer el valor convertido
  int value = ADC;

  // Deshabilitar el ADC para ahorrar energía
  ADCSRA &= ~(1 << ADEN);

  return value;
}

void setup() {
  
  DDRB |= (1 << PB2);
  DDRD &= ~((1 << PD4));
  // Inicializar el objeto servo
  TCCR1A = 0;
  TCCR1B = 0;
  TCNT1 = 0; //Reestablecer
  OCR1A = 15624; // Es el tiempo en que ocurre la interrupción
  TCCR1B |= (1 << WGM12);
  TCCR1B |= (1 << CS12) | (1 << CS10); // Configuramos el preescalador a 1024
  TIMSK1 |= (1 << OCIE1A); // Se habilita la interrupcion
  PCICR |= B00000100; // Se activan las interrupciones del puerto PD
  PCMSK2 |= B00010000;
  sei(); // Se activan las interrupciones


  lcd.init(); // Inicializar el LCD
  lcd.backlight();
  lcd.print("Brazo Robotico:"); // Mostrar "Servo:" en la primera línea del LCD
  lcd.setCursor(0,1); 
  lcd.print("Bienvenidos"); 
  delay(2000);
  lcd.clear();
  
  // Iniciar comunicación serial a 9600 baudios
  Serial.begin(9600);
}

void loop() {
  // Leer los valores de los joysticks
  int joyStick1_XValue = leerjoystick(joyStick1_X);
  int joyStick1_YValue = leerjoystick(joyStick1_Y);
  int joyStick2_XValue = leerjoystick(joyStick2_X);
  int joyStick2_YValue = leerjoystick(joyStick2_Y);

  // Actualizar los ángulos de los servomotores
  codoAngle = map(joyStick2_XValue, 0, 1023, 0, 180);
  brazoAngle = map(joyStick1_YValue, 0, 1023, 0, 180);
  munecaAngle = map(joyStick2_YValue, 0, 1023, 0, 180);
  garraAngle = map(joyStick1_XValue, 0, 1023, 0, 180);
  
   
  // Enviar los ángulos de los servomotores a través de la comunicación serial
  Serial.print(codoAngle);
  Serial.print(",");
  Serial.print(brazoAngle);
  Serial.print(",");
  Serial.print(munecaAngle);
  Serial.print(",");
  Serial.println(garraAngle);

  lcd.setCursor(1,0);
  
  int currentServoIndex = -1; // Índice del servo actual

  // Verificar los valores de los potenciómetros y determinar el servo correspondiente
  if (joyStick1_XValue >= 0 && joyStick1_XValue <= 400) {
    currentServoIndex = 0;
  } else if (joyStick1_YValue >= 0 && joyStick1_YValue <= 400) {
    currentServoIndex = 1;
  } else if (joyStick2_YValue >= 0 && joyStick2_YValue <= 400) {
    currentServoIndex = 2;
  } else if (joyStick2_XValue >= 0 && joyStick2_XValue <= 400) {
    currentServoIndex = 3;
  }

  // Si hay un cambio en el servo movido, mostrar el nombre del servo en la LCD
  if (currentServoIndex != -1 && currentServoIndex != lastServoIndex) {
    lcd.clear();
    lcd.print("Moviendo ...");
    lastServoIndex = currentServoIndex; // Actualizar el último servo movido
  }

  checkSaveButton();

  const int saveButton = 7;
  bool buttonState = digitalRead(saveButton);

  if (buttonState == HIGH && !savePosition) {
    savePosition = true;
    readSavedPositions(); // Leer las posiciones en la EEPROM

    lcd.clear();
    lcd.print("Reproduciendo");
    lcd.setCursor(0, 1);
    lcd.print("movimiento");
    delay(2000);
    lcd.clear();
  }
  
  const int playButton = 8;
  bool playbuttonState = digitalRead(playButton);

  if (playbuttonState == HIGH && !play) {
    play = true;
    savePositionsToEEPROM(); // Guardar las posiciones en la EEPROM

    lcd.clear();
    lcd.print("Posiciones");
    lcd.setCursor(0, 1);
    lcd.print("guardadas");
    delay(2000);
    lcd.clear();
  }

  Serial.print(codoAngle);
  Serial.print(",");
  Serial.print(brazoAngle);
  Serial.print(",");
  Serial.print(munecaAngle);
  Serial.print(",");
  Serial.println(garraAngle);

  if (savePosition) {
    readSavedPositions(); // Leer las posiciones guardadas desde la EEPROM
    sendSavedPositions(); // Enviar las posiciones guardadas a través de la comunicación serial
    savePosition = false;
  }

  // Retardo para evitar lecturas rápidas y mejorar la estabilidad
  delay(50);
}

ISR(TIMER1_COMPA_vect) {
  // Se apaga la led
  PORTB &= (~(1 << PB2));

  // Condiciones para que se encienda la led
  if (ledState == 0) {
    PORTB |= (1 << PB2);
  } else if (ledState == 1) {
    PORTB |= (1 << PB3);
  } else if (ledState == 2) {
    PORTB |= (1 << PB4);
  }
  ledState++;
  // Se reinicia el estado del LED
  if (ledState > 3) {
    ledState = 0;
  }
}

//Interrupcion para el boton de led cuando hay ganador
ISR (PCINT2_vect) {
  if (PIND & B00010000) {
    buttonstate1 = 1;
    Serial.println(buttonstate1);
  }
}

void checkSaveButton() {
  const int saveButton = 7;
  static bool previousButtonState = LOW;
  bool buttonState = digitalRead(saveButton);

  if (buttonState != previousButtonState) {
    if (buttonState == HIGH) {
      savePosition = true;
    } else {
      savePosition = false;
    }
  }

  previousButtonState = buttonState;
}

void savePositionsToEEPROM() {
  int address1 = 0;
  int address2 = address1 + sizeof(int);
  int address3 = address2 + sizeof(int);
  int address4 = address3 + sizeof(int);

  EEPROM.put(address1, servo1_savedAngle);
  EEPROM.put(address2, servo2_savedAngle);
  EEPROM.put(address3, servo3_savedAngle);
  EEPROM.put(address4, servo4_savedAngle);
}

void readSavedPositions() {
  int address1 = 0;
  int address2 = address1 + sizeof(int);
  int address3 = address2 + sizeof(int);
  int address4 = address3 + sizeof(int);

  EEPROM.get(address1, servo1_savedAngle);
  EEPROM.get(address2, servo2_savedAngle);
  EEPROM.get(address3, servo3_savedAngle);
  EEPROM.get(address4, servo4_savedAngle);
}

void sendSavedPositions() {
  Serial.print(servo1_savedAngle);
  Serial.print(",");
  Serial.print(servo2_savedAngle);
  Serial.print(",");
  Serial.print(servo3_savedAngle);
  Serial.print(",");
  Serial.println(servo4_savedAngle);
}
